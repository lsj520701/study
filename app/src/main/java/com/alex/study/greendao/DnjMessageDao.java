package com.alex.study.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.alex.study.gdao.bean.DnjMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "message".
*/
public class DnjMessageDao extends AbstractDao<DnjMessage, Long> {

    public static final String TABLENAME = "message";

    /**
     * Properties of entity DnjMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property Phone = new Property(2, String.class, "phone", false, "PHONE");
        public final static Property IsExpert = new Property(3, boolean.class, "isExpert", false, "IS_EXPERT");
        public final static Property NikeName = new Property(4, String.class, "nikeName", false, "NIKE_NAME");
        public final static Property UserId = new Property(5, String.class, "userId", false, "USER_ID");
        public final static Property MessageId = new Property(6, Long.class, "messageId", false, "MESSAGE_ID");
        public final static Property LastContent = new Property(7, String.class, "lastContent", false, "LAST_CONTENT");
    }


    public DnjMessageDao(DaoConfig config) {
        super(config);
    }
    
    public DnjMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"message\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"PHONE\" TEXT," + // 2: phone
                "\"IS_EXPERT\" INTEGER NOT NULL ," + // 3: isExpert
                "\"NIKE_NAME\" TEXT," + // 4: nikeName
                "\"USER_ID\" TEXT," + // 5: userId
                "\"MESSAGE_ID\" INTEGER," + // 6: messageId
                "\"LAST_CONTENT\" TEXT);"); // 7: lastContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"message\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DnjMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
        stmt.bindLong(4, entity.getIsExpert() ? 1L: 0L);
 
        String nikeName = entity.getNikeName();
        if (nikeName != null) {
            stmt.bindString(5, nikeName);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(6, userId);
        }
 
        Long messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindLong(7, messageId);
        }
 
        String lastContent = entity.getLastContent();
        if (lastContent != null) {
            stmt.bindString(8, lastContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DnjMessage entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(3, phone);
        }
        stmt.bindLong(4, entity.getIsExpert() ? 1L: 0L);
 
        String nikeName = entity.getNikeName();
        if (nikeName != null) {
            stmt.bindString(5, nikeName);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(6, userId);
        }
 
        Long messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindLong(7, messageId);
        }
 
        String lastContent = entity.getLastContent();
        if (lastContent != null) {
            stmt.bindString(8, lastContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DnjMessage readEntity(Cursor cursor, int offset) {
        DnjMessage entity = new DnjMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone
            cursor.getShort(offset + 3) != 0, // isExpert
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // nikeName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // messageId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // lastContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DnjMessage entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsExpert(cursor.getShort(offset + 3) != 0);
        entity.setNikeName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMessageId(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setLastContent(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DnjMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DnjMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DnjMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
